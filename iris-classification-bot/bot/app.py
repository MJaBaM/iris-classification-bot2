# bot/app.py
import telebot
from telebot import types
import requests
import sqlite3
import logging
from datetime import datetime
import os
from keyboards import main_menu, cancel_markup
import pandas as pd
import io
import time

# –ö–æ–Ω—Ñ–∏–≥–∏
API_URL = "http://localhost:5000/predict"
BATCH_API_URL = "http://localhost:5000/batch_predict"
MAX_CSV_ROWS = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

bot = telebot.TeleBot("—Ç–æ–∫–µ–Ω")
os.makedirs('temp_files', exist_ok=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('iris_bot.db')
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  username TEXT,
                  first_name TEXT,
                  last_name TEXT,
                  registration_date TEXT,
                  last_active TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS requests
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  timestamp TEXT,
                  features TEXT,
                  prediction TEXT,
                  FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    c.execute('''CREATE TABLE IF NOT EXISTS batch_requests
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  timestamp TEXT,
                  file_name TEXT,
                  rows_processed INTEGER,
                  FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    conn.commit()
    conn.close()

init_db()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    conn = sqlite3.connect('iris_bot.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users(user_id, username, first_name, last_name, registration_date, last_active) VALUES (?, ?, ?, ?, ?, ?)',
              (user.id, user.username, user.first_name, user.last_name, datetime.now().isoformat(), datetime.now().isoformat()))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, 
                    "üå∏ *–ë–æ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤ –∏—Ä–∏—Å–∞* üå∏\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 4 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞, –¥–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞)\n"
                    "–ü—Ä–∏–º–µ—Ä: _5.1, 3.5, 1.4, 0.2_\n\n"
                    "–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    reply_markup=main_menu(),
                    parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@bot.message_handler(commands=['cancel'])
def cancel(message):
    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    conn = sqlite3.connect('iris_bot.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("SELECT COUNT(*) FROM requests WHERE user_id = ?", (message.from_user.id,))
    single_count = c.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
    c.execute("SELECT COUNT(*), SUM(rows_processed) FROM batch_requests WHERE user_id = ?", (message.from_user.id,))
    batch_count, total_rows = c.fetchone()
    total_rows = total_rows or 0
    
    conn.close()
    
    stats_text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"‚Ä¢ –û–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {single_count}\n"
        f"‚Ä¢ –ü–∞–∫–µ—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {batch_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Ü–≤–µ—Ç–∫–æ–≤: {single_count + total_rows}"
    )
    
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–º–æ—â—å"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def show_help(message):
    help_text = (
        "üå∏ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É* üå∏\n\n"
        "–Ø –º–æ–≥—É –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç—ã –∏—Ä–∏—Å–∞ –Ω–∞ 3 –≤–∏–¥–∞:\n"
        "- Setosa\n"
        "- Versicolor\n"
        "- Virginica\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 4 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "   `–¥–ª–∏–Ω–∞_—á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞, —à–∏—Ä–∏–Ω–∞_—á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞, –¥–ª–∏–Ω–∞_–ª–µ–ø–µ—Å—Ç–∫–∞, —à–∏—Ä–∏–Ω–∞_–ª–µ–ø–µ—Å—Ç–∫–∞`\n"
        "   –ü—Ä–∏–º–µ—Ä: _5.1, 3.5, 1.4, 0.2_\n\n"
        "2. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∞–∫—Å. 100 —Å—Ç—Ä–æ–∫)\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏\n"
        "- –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV: –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"
@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
def show_model_info(message):
    model_info = (
        "üîç *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏*\n\n"
        "‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º: Random Forest (100 –¥–µ—Ä–µ–≤—å–µ–≤)\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ: Iris dataset (150 samples)\n"
        "‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ~96%\n"
        "‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫–∏:\n"
        "  1. –î–ª–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞ (—Å–º)\n"
        "  2. –®–∏—Ä–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞ (—Å–º)\n"
        "  3. –î–ª–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞ (—Å–º)\n"
        "  4. –®–∏—Ä–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞ (—Å–º)\n\n"
        "–ú–æ–¥–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö."
    )
    bot.send_message(message.chat.id, model_info, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)
@bot.message_handler(func=lambda message: True, content_types=['text'])
def classify(message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é
    if message.text in ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–º–æ—â—å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"]:
        return
        
    try:
        features = [float(x.strip()) for x in message.text.split(',')]
        if len(features) != 4:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–≤–Ω–æ 4 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return
    except:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ–∂–∏–¥–∞–π—Ç–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ
        wait_msg = bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–≤–µ—Ç–æ–∫...", reply_markup=cancel_markup())
        
        res = requests.post(API_URL, json={'features': features})
        if res.status_code != 200:
            bot.delete_message(message.chat.id, wait_msg.message_id)
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ API: {res.json().get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return

        data = res.json()
        class_name = data['class_name']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        conn = sqlite3.connect('iris_bot.db')
        c = conn.cursor()
        c.execute('INSERT INTO requests(user_id, timestamp, features, prediction) VALUES (?, ?, ?, ?)',
                  (message.from_user.id, datetime.now().isoformat(), str(features), class_name))
        conn.commit()
        conn.close()

        # –£–¥–∞–ª—è–µ–º "–æ–∂–∏–¥–∞–π—Ç–µ" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.delete_message(message.chat.id, wait_msg.message_id)
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response_text = (
            f"üå∏ *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏* üå∏\n\n"
            f"‚Ä¢ –í–∏–¥: *{class_name}*\n"
            f"‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫–∏:\n"
            f"  - –î–ª–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞: {features[0]:.1f} —Å–º\n"
            f"  - –®–∏—Ä–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞: {features[1]:.1f} —Å–º\n"
            f"  - –î–ª–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞: {features[2]:.1f} —Å–º\n"
            f"  - –®–∏—Ä–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞: {features[3]:.1f} —Å–º"
        )
        
        bot.send_message(message.chat.id, response_text, parse_mode='Markdown')

    except Exception as e:
        logging.error(f'Error processing message: {e}')
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV")
def prompt_csv_upload(message):
    help_text = (
        "üìÅ *–ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞ (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ):\n"
        "- sepal_length (–¥–ª–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞)\n"
        "- sepal_width (—à–∏—Ä–∏–Ω–∞ —á–∞—à–µ–ª–∏—Å—Ç–∏–∫–∞)\n"
        "- petal_length (–¥–ª–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞)\n"
        "- petal_width (—à–∏—Ä–∏–Ω–∞ –ª–µ–ø–µ—Å—Ç–∫–∞)\n\n"
        "*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "- –ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–æ–∫\n"
        "- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 5MB\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /sample_csv"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=cancel_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sample_csv
@bot.message_handler(commands=['sample_csv'])
def send_sample_csv(message):
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
    sample_data = """sepal_length,sepal_width,petal_length,petal_width
5.1,3.5,1.4,0.2
6.7,3.0,5.2,2.3
4.9,3.1,1.5,0.1
7.0,3.2,4.7,1.4"""
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    csv_file = io.StringIO(sample_data)
    csv_file.name = "iris_sample.csv"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_document(message.chat.id, (csv_file.name, csv_file.getvalue().encode()), 
                     caption="–ü—Ä–∏–º–µ—Ä CSV-—Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")









@bot.message_handler(content_types=['document'])
def handle_csv_file(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not message.document.file_name.lower().endswith('.csv'):
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = bot.send_message(message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")

        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –ß—Ç–µ–Ω–∏–µ CSV
            try:
                df = pd.read_csv(io.BytesIO(downloaded_file))
            except Exception as e:
                bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞", 
                                   chat_id=status_msg.chat.id, 
                                   message_id=status_msg.message_id)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            required_cols = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
            missing_cols = [col for col in required_cols if col not in df.columns]
            
            if missing_cols:
                bot.edit_message_text(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_cols)}",
                                   chat_id=status_msg.chat.id,
                                   message_id=status_msg.message_id)
                return
                
            if len(df) > MAX_CSV_ROWS:
                bot.edit_message_text(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å–∏–º—É–º {MAX_CSV_ROWS})",
                                   chat_id=status_msg.chat.id,
                                   message_id=status_msg.message_id)
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            try:
                bot.edit_message_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑...",
                                   chat_id=status_msg.chat.id,
                                   message_id=status_msg.message_id)
            except:
                pass

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            features = df[required_cols].values.tolist()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            try:
                requests.get(API_URL, timeout=3)
            except:
                bot.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                   chat_id=status_msg.chat.id,
                                   message_id=status_msg.message_id)
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ API
            try:
                response = requests.post(
                    BATCH_API_URL,
                    json={'features_list': features},
                    timeout=30
                )
                
                if response.status_code == 404:
                    bot.edit_message_text("‚ùå –§—É–Ω–∫—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                                       chat_id=status_msg.chat.id,
                                       message_id=status_msg.message_id)
                    return
                
                response.raise_for_status()
                results = response.json()
            except requests.exceptions.RequestException as e:
                bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                                    chat_id=status_msg.chat.id,
                                    message_id=status_msg.message_id)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            df['prediction'] = results['class_names']
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            try:
                conn = sqlite3.connect('iris_bot.db')
                c = conn.cursor()
                c.execute('''INSERT INTO batch_requests 
                           (user_id, timestamp, file_name, rows_processed) 
                           VALUES (?, ?, ?, ?)''',
                         (message.from_user.id, datetime.now().isoformat(), 
                          message.document.file_name, len(df)))
                conn.commit()
                conn.close()
            except Exception as e:
                logging.error(f"Database error: {str(e)}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output = io.StringIO()
            df.to_csv(output, index=False)
            output.seek(0)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                bot.delete_message(chat_id=status_msg.chat.id, 
                                 message_id=status_msg.message_id)
            except:
                pass

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
            bot.send_document(
                message.chat.id,
                (f"results_{message.document.file_name}", output.getvalue().encode()),
                caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
            
        except Exception as e:
            try:
                bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                                   chat_id=status_msg.chat.id,
                                   message_id=status_msg.message_id)
            except:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            logging.error(f"CSV processing error: {str(e)}")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Critical error in handle_csv_file: {str(e)}")



if __name__ == '__main__':
    logging.info("Starting bot...")
    bot.infinity_polling()